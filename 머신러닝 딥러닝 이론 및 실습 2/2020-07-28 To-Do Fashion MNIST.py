# -*- coding: utf-8 -*-
"""2020-07-28 To-Do Fashion MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w2-fS1rYcHAjSnf-iHL9S11ogLhFd7RC

# Fashion MNIST 데이터셋 불러오기

## 필요한 package import
"""

import tensorflow as tf
import matplotlib.pyplot as plt

fashion_mnist = tf.keras.datasets.fashion_mnist
(train_X, train_Y), (test_X, test_Y) = fashion_mnist.load_data()

train_X = train_X / 255.0
test_X = test_X / 255.0

"""## 데이터를 채널을 가진 이미지 형태(3차원)으로 바꾸기"""

# reshape 이전
print(train_X.shape, test_X.shape)

train_X = train_X.reshape(-1, 28, 28, 1)
test_X = test_X.reshape(-1, 28, 28, 1)

# reshape 이후
print(train_X.shape, test_X.shape)

"""## 데이터 확인"""

print(set(train_Y))

plt.figure(figsize=(10, 10))
for c in range(16):
    plt.subplot(4,4,c+1)
    plt.imshow(train_X[c].reshape(28,28), cmap='gray')
    
plt.show()

print(train_Y[:16])

"""# (직접 해보기) 모델 정의 및 컴파일

CNN 모델 구성
- 사용 layer 및 optimizer, loss는 각자 알아서 구성해 볼 것
1. `tf.keras.Sequential`을 사용하여 모델 정의
1. 모델 컴파일
1. 모델 요약 출력
"""

from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D

model = tf.keras.Sequential([
    # TODO - define model layers
    Conv2D(16, 3, padding='valid', activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPool2D(strides=(2,2)),
    Conv2D(32, 3, padding='valid', activation='relu'),
    tf.keras.layers.MaxPool2D(strides=(2,2)),
    Conv2D(64, 3, padding='valid', activation='relu'),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(10, activation='softmax')

])

model.summary()

model.compile(optimizer='adam', 
              loss=tf.keras.losses.SparseCategoricalCrossentropy(),
              metrics=['accuracy'])

"""## 모델 학습 & loss 그래프 생성"""

history = model.fit(train_X, train_Y, epochs=5, validation_split=0.25)

plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], 'b-', label='loss')
plt.plot(history.history['val_loss'], 'r--', label='val_loss')
plt.xlabel('Epoch')
plt.legend()
plt.grid()
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], 'g-', label='accuracy')
plt.plot(history.history['val_accuracy'], 'k--', label='val_accuracy')
plt.xlabel('Epoch')
plt.ylim(0.7, 1)
plt.legend()
plt.grid()
plt.show()